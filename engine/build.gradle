apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

// This is the library version used when deploying the artifact
version = "$pBuildVersion.$pBuildNumber$pBuildTag"
// Maven Group ID for the artifact
group = pMavenGroupId

android {
    signingConfigs {
        debug {
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storeFile file('../keystore/avesha_debug.keystore')
            storePassword 'android'
        }
    }
    compileSdkVersion Integer.parseInt(pTargetSdkVersion)
    buildToolsVersion pBuildToolsVersion

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion pTargetSdkVersion as int
        versionCode "$pBuildVersionCode" as int
        versionName "$pBuildVersion.$pBuildNumber"

        multiDexEnabled true

        testApplicationId "com.sample.app2"
        testInstrumentationRunner "android.test.InstrumentationTestRunner"
        testHandleProfiling true
        testFunctionalTest true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
        debug {
            debuggable true
            minifyEnabled false
            testCoverageEnabled true
            signingConfig signingConfigs.debug
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    lintOptions {
        abortOnError false
    }
}

apply from: "build.workaround-missing-resource.gradle"

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:27.0.2'
    compile 'com.android.support:multidex:1.0.2'
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.9.5'
    testCompile 'org.apache.maven:maven-ant-tasks:2.1.3'
    testCompile('org.robolectric:robolectric:3.+') {
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']
    pkg {
        repo = pRepoType
        name = "${pMavenGroupId}:${project.name}"
        websiteUrl = pPublicSiteUrl
        vcsUrl = pPublicGitUrl
        licenses = ["${pLicenseShortName}"]
        publish = true
    }
}

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'

                name pBaseLibraryDescription
                url pPublicSiteUrl

                licenses {
                    license {
                        name pLicenseName
                        url pLicenseUrl
                    }
                }
                developers {
                    developer {
                        id pDeveloperId
                        name pDeveloperName
                        email pDeveloperEmail
                    }
                }
                scm {
                    connection pPublicGitUrl
                    developerConnection pPublicGitUrl
                    url pPublicSiteUrl
                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    title = "FBA Toolkit documentation"
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile

    // exclude generated files
    exclude '**/BuildConfig.java'
    exclude '**/R.java'

    // exclude any android support packages
    exclude '**/android/support/**'

    options {
        links("http://docs.oracle.com/javase/7/docs/api/");
        links("http://d.android.com/reference/");
        locale = 'ru_RU'
        encoding = 'UTF-8'
    }
    failOnError false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}